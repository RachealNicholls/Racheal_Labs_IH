-- SQL JOIN
-- task: listing number of films per category
SELECT c.name AS category, COUNT(f.film_id) AS number_of_films
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY number_of_films DESC;

-- solution: see query above

-- task :retrieve store_id, city, countra for each store

SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;
-- solution 2 stores : one in Canada and one in Australia

-- task: calculating the total revenue generated by each store
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id;

-- solution: see query above

-- task:the average running time for each film category
SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC;

-- solution: see query above

-- task: film category with the longest average running time
SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC
LIMIT 1;


-- solution: Sports with average ru nning time of 128.2027 minutes

-- task: 10 most requently rented movies: 
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- solution: see query above

-- task: can 'Academy dinosaur 'be rented from store 1 ?
SELECT f.title, i.store_id
FROM film f
JOIN inventory i ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1;


-- solution: yes, it can be rented from store 1

-- task: SELECT f.title,

   -- task: list of all film titles and availability status
   SELECT f.title,
       CASE 
           WHEN i.film_id IS NULL THEN 'NOT available'
           ELSE 'Available'
       END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title;

-- solution: see query above